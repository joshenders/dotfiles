###########
# Aliases #
###########

# No request timer output by default
alias curl='curl --silent'

# unified diff, for human readability
alias diff='diff -u'

# disable command printing in dig output
alias dig='dig +nocmd'

# confirm and verbose
alias rm='rm -iv'

# Enabled colorized output in tree
alias tree='tree -C'

# Colorized output and classification
alias ls='ls -FG'

# Console print and colorized streams
alias tcpflow='tcpflow -c -e'

# Convenient audible bell alias for alerting
alias bell='printf "\a"'

# KLUDGE: fix for airserver audio mirroring issue
alias airplayfix='sudo killall coreaudiod'

# Lock screen
alias lock='/System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine'   

# Show wifi info
alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I'

# Dig for .local multicast addresses
alias mdig='dig @224.0.0.251 -p 5353'

# show usb info
alias lsusb='system_profiler SPUSBDataType'

# DROID
alias droid='say -v cello droid'

# Don't print banner and import math libs as a simple way to set 'scale'
# This can also be done with:
#   `export BC_ENV_ARGS=~/.bc; echo 'scale=20' >> ~/.bc`
alias bc='bc -q -l'

# Use GNU find if it exists
if [[ -f "/opt/local/bin/gfind" ]]; then
    alias find='gfind'
fi

###############
# Environment #
###############


# If this is set, Python wonâ€™t try to write .pyc or .pyo files on the import of source modules.
export PYTHONDONTWRITEBYTECODE=true

# Set preferred editor
# This is checked before $EDITOR on some older utils
export VISUAL=vim
export EDITOR=vim

# colorized grep output
export GREP_OPTIONS='--color=auto'

# Unset bounds on history file. Disk is cheap, unlimited is fine until it's not
# and then rotate
export HISTFILESIZE=
export HISTSIZE=

# Add timestamps to .bash_history
# TODO: ideally finding someway to store the current working directory for those times when you want to know where you ran that career ending command
export HISTTIMEFORMAT="%Y-%m-%d %T "

# The "ignoreboth" setting ignores repeated lines as well as silently discards
# lines beginning with a space for privacy. Equivalent to 'ignoredups' and
# 'ignorespace'
export HISTCONTROL=ignoreboth

# Commands to not log in history
export HISTIGNORE=ls:cd

# Lua package path
export LUA_PATH='/opt/local/share/luarocks/share/lua/5.3/?.lua;;'
 
# Force ls to output ansi escape sequences (colors) even when output is not a terminal, eg. a pipe
export CLICOLOR_FORCE=true

# causes raw control characters to be printed and therefore interpreted by your terminal
export LESS=-R

# Less colors for man pages
# - http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
#export LESS_TERMCAP_mb=$'\e[01;31m'       # begin blinking
#export LESS_TERMCAP_md=$'\e[01;38;5;74m'  # begin bold
#export LESS_TERMCAP_me=$'\e[0m'           # end mode
#export LESS_TERMCAP_se=$'\e[0m'           # end standout-mode
#export LESS_TERMCAP_so=$'\e[38;5;246m'    # begin standout-mode - info box
#export LESS_TERMCAP_ue=$'\e[0m'           # end underline
#export LESS_TERMCAP_us=$'\e[04;38;5;146m' # begin underline

# Happy/Sad Prompt
if [[ "$EUID" -gt '0' ]]; then
    export PS1='\[\e[1;34m\]\u\[\e[1;30m\]@\[\e[1;36m\]\h \[\e[34m\]\W \[\e[3$((($?))&&echo 1m\]:\(||echo 2m\]:\)) \[\e[30m\]\$ \[\e[0m\]'
else
    export PS1='\[\e[1;31m\]\u\[\e[1;30m\]@\[\e[1;36m\]\h \[\e[34m\]\W \[\e[3$((($?))&&echo 1m\]:\(||echo 2m\]:\)) \[\e[30m\]\$ \[\e[0m\]'
fi

# Path for MacPorts
export PATH=/opt/local/bin:/opt/local/sbin:/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin:/Users/jenders/Documents/Code/arcanist/bin:$PATH

#############
# Functions #
#############

function flushcache() {
    sudo \dscacheutil -flushcache
    sudo \killall -HUP mDNSResponder
}

function npr() {
    # Usage: npr
    # Creates NPR playlist
    local day="$(date '+%A')"
    local date="$(date '+%m-%d-%Y')"

    case ${day} in
        Sunday)
          local program='10'
          ;;
        Saturday)
          local program='7'
          ;;
        *)
          local program='3'
          ;;
    esac

    local url="http://www.npr.org/player/v2/mediaPlayer.html?action=1&t=3&islist=true&id=${program}&d=${date}"
    \open "${url}"
}

function certchain() {
    # Usage: certchain
    # Displays PKI trust chain for a given domain
    if [[ "$#" -ne 1 ]]; then
        echo "Usage: ${FUNCNAME} <ip|domain[:port]>"
        return 1
    fi

    local host_port="$1"

    if [[ "$1" != *:* ]]; then
        local host_port="${1}:443"
    fi

    \openssl \
        s_client -connect "${host_port}" </dev/null 2>/dev/null \
        | \fgrep \
            --color=never \
            --extended-regexp '\ (s|i):'
}
